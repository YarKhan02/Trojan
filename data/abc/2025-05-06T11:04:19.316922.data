environ({'ALLUSERSPROFILE': 'C:\\ProgramData', 'APPDATA': 'C:\\Users\\YarKhan\\AppData\\Roaming', 'C:\\MINGW\\BIN': 'C:\\MinGW\\bin', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'COMPUTERNAME': 'YARKHAN', 'COMSPEC': 'C:\\WINDOWS\\system32\\cmd.exe', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'EFC_6140': '1', 'GO': 'C:\\Program Files\\Go\\bin', 'GOPATH': 'C:\\Users\\YarKhan\\go', 'HOMEDRIVE': 'C:', 'HOMEPATH': '\\Users\\YarKhan', 'IGCCSVC_DB': 'AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAAfQOKJE/HvkCe4y+r9xMDFgQAAAACAAAAAAAQZgAAAAEAACAAAACW6LtNuy3Qra9ZuH1QGOHzKZ7XFYGOB08ZwQavb5/TOwAAAAAOgAAAAAIAACAAAADIxAt+RVp9oXvZIurcCaEkdVj2SnEda8p+KROwh7f6nmAAAABVT58AU/myEGxsRMmbrRXF8o8kj7/s1ZwvSLaWraAA57EsElK99LxU2xetXnNN3KhTkx0tbRlAFiQKMJQvW1HdML3hGE0l0Vy3QTndmuUzgzfCT83n3pq6dQawzMJzPWhAAAAAx13UuH9wB3SuE7dGG/V6y5gOuwBBBBA77XS0sNe3vnZPTze4ksS3mx6cfJ5nKlNyFTppvdxsXAhO3BClOFc11g==', 'LOCALAPPDATA': 'C:\\Users\\YarKhan\\AppData\\Local', 'LOGONSERVER': '\\\\YARKHAN', 'NMAP': 'C:\\Program Files (x86)\\Nmap', 'NUMBER_OF_PROCESSORS': '8', 'ONEDRIVE': 'C:\\Users\\YarKhan\\OneDrive', 'ONEDRIVECONSUMER': 'C:\\Users\\YarKhan\\OneDrive', 'OS': 'Windows_NT', 'PATH': 'C:\\Users\\YarKhan\\AppData\\Local\\Temp\\_MEI41922\\pywin32_system32;C:\\oraclexe\\app\\oracle\\product\\11.2.0\\server\\bin;;C:\\Program Files\\Common Files\\Oracle\\Java\\javapath;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\nodejs\\;C:\\Users\\YarKhan\\AppData\\Local\\Programs\\Python\\Python310;C:\\Program Files\\LOVE;C:\\Program Files\\Git\\cmd;C:\\Program Files\\OpenSSL-Win64\\bin;C:\\Users\\YarKhan\\AppData\\Local\\bin\\NASM;C:\\Program Files\\Microsoft SQL Server\\150\\Tools\\Binn\\;C:\\vcpkg\\installed\\x86-windows\\bin;C:\\Program Files\\curl-7.88.1_2-win64-mingw\\bin;C:\\Program Files\\dotnet\\;C:\\Program Files\\Amazon\\AWSCLIV2\\;C:\\Program Files\\Java\\jdk-17.0.2\\bin;C:\\Users\\YarKhan\\Downloads\\cmake-3.29.2-windows-x86_64\\cmake-3.29.2-windows-x86_64\\bin;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\Program Files\\Go\\bin;C:\\Program Files\\PostgreSQL\\16\\bin;C:\\Program Files\\Cloudflare\\Cloudflare WARP\\;C:\\Users\\YarKhan\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\YarKhan\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Users\\YarKhan\\AppData\\Roaming\\npm;C:\\Users\\YarKhan\\AppData\\Local\\Programs\\Python\\Python310;C:\\Users\\YarKhan\\AppData\\Local\\Programs\\Python\\Python310\\Scripts;C:\\Program Files\\JetBrains\\PyCharm 2021.3.1\\bin;;C:\\MinGW\\bin;C:\\Program Files\\heroku\\bin;C:\\Users\\YarKhan\\go\\bin;C:\\msys64\\usr\\bin;C:\\Users\\YarKhan\\AppData\\Local\\Programs\\Ollama;C:\\flutter_windows_3.24.5-stable\\flutter\\bin;C:\\Users\\YarKhan\\AppData\\Local\\Programs\\mongosh\\', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 140 Stepping 1, GenuineIntel', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_REVISION': '8c01', 'PROGRAMDATA': 'C:\\ProgramData', 'PROGRAMFILES': 'C:\\Program Files', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'PROGRAMW6432': 'C:\\Program Files', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PT8HOME': 'C:\\Program Files\\Cisco Packet Tracer 8.2.2', 'PUBLIC': 'C:\\Users\\Public', 'PYCHARM': 'C:\\Program Files\\JetBrains\\PyCharm 2021.3.1\\bin;', 'SESSIONNAME': 'Console', 'SYSTEMDRIVE': 'C:', 'SYSTEMROOT': 'C:\\WINDOWS', 'TEMP': 'C:\\Users\\YarKhan\\AppData\\Local\\Temp', 'TMP': 'C:\\Users\\YarKhan\\AppData\\Local\\Temp', 'USERDOMAIN': 'YARKHAN', 'USERDOMAIN_ROAMINGPROFILE': 'YARKHAN', 'USERNAME': 'YarKhan', 'USERPROFILE': 'C:\\Users\\YarKhan', 'VBOX_MSI_INSTALL_PATH': 'C:\\Program Files\\Oracle\\VirtualBox\\', 'WINDIR': 'C:\\WINDOWS', 'ZES_ENABLE_SYSMAN': '1', '_PYI_APPLICATION_HOME_DIR': 'C:\\Users\\YarKhan\\AppData\\Local\\Temp\\_MEI41922', '_PYI_ARCHIVE_FILE': 'C:\\Users\\YarKhan\\Desktop\\Python\\Trojan\\dist\\main.exe', '_PYI_PARENT_PROCESS_LEVEL': '1'})